{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBar","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","useState","setRobots","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iOAgBeA,G,MAZF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACtB,OACI,sBAAKC,UAAY,mDAAjB,UACI,qBAAKA,UAAU,YACdC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACjB,gCACI,6BAAKF,IACL,4BAAIC,YCeLK,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIf,OAEI,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCAVC,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,qBAAKV,UAAU,MAAf,SACC,uBACAW,KAAO,SACPX,UAAW,mCACVY,YAAa,eACbC,SAAWH,OCANI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAQ,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,SAAjE,SACKJ,EAAMK,Y,MCoCJC,MAjCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNlB,EADM,KACEmB,EADF,OAEyBD,mBAAS,IAFlC,mBAENb,EAFM,KAEOe,EAFP,KAKbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAUP,EAAUO,QAE5B,IAEF,IAIMC,EAAiB3B,EAAO4B,QAAO,SAAAC,GACnC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAS1B,EAAYyB,kBAEvD,OAAQ9B,EAAOgC,OAGX,sBAAKpC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAbM,SAAC2B,GACtBb,EAAea,EAAMC,OAAOC,UAaxB,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnC,OAAQ2B,SAPxB,0CChBgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.939a3610.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\n\nconst card = ({name,email,id})=>{\n    return(\n        <div className = 'bg-light-blue dib br3 pa3 ma2 grow bw-5 shadow-2'> \n            <img className=\"shadow-5\n            \"alt=\"robots\" src={`https://robohash.org/${id}?set=set3`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n} \nexport default card\n\n\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    // if(true){\n    //     throw new Error('Noooo!');\n    // }\n    return(\n    \n        <div>\n           { \n            robots.map((user,i) =>{\n                return (\n                    <Card \n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email} \n                    />\n                    )  \n                })\n            }\n        </div>\n    );\n}\nexport default CardList;\n\n           \n        ","import React from 'react';\n\n\nconst SearchBar = ({searchfield,searchChange}) => {\n    return(\n        <div className=\"pa2\">\n         <input \n         type = 'search' \n         className ='pa3 ba b--green bg-lightest-blue'\n          placeholder ='Search Robot'\n          onChange ={searchChange}\n          />\n        </div>\n    )\n}\nexport default SearchBar;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style ={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","\n \nimport React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/SearchBar';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nfunction App() {\n  const [robots, setRobots] = useState([])\n  const [searchfield, setSearchfield] = useState('')\n  // const [count, setCount] = useState(0) // for demo purposes\n\n  useEffect(()=> {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {setRobots(users)});\n    // console.log(count)\n  },[]) // if you add count, only run if count changes.\n\n  const onSearchChange = (event) => {\n    setSearchfield(event.target.value)\n  }\n\n  const filteredRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  })\n  return !robots.length ?\n    <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        {/* <button onClick={()=>setCount(count+1)}>Click Me!</button> */}\n        <SearchBar searchChange={onSearchChange}/>\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App  />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}